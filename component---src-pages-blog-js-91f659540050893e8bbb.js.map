{"version":3,"file":"component---src-pages-blog-js-91f659540050893e8bbb.js","mappings":"qLAMA,MAAMA,EAAwBC,IAC5B,IAAKA,GAA0B,oBAAXC,OAAwB,CAE1C,MAAMC,EAAW,qBACXC,EAAQH,GAAQA,EAAKG,MAAMD,GACjC,OAAOC,EAAQA,EAAM,GAAK,EAC5B,CAEA,IACE,MAAMC,EAAS,IAAIC,UAEbC,EADMF,EAAOG,gBAAgBP,EAAM,aACtBQ,cAAc,OACjC,OAAOF,EAASA,EAAOG,IAAM,EAC/B,CAAE,MAAOC,GACP,MAAO,EACT,GAGIC,EAAuBX,IAC3B,IAAKA,GAA0B,oBAAXC,OAElB,OAAOD,EAAOA,EAAKY,QAAQ,WAAY,IAAIC,MAAM,EAAG,KAAO,MAAQ,GAGrE,IACE,MAAMT,EAAS,IAAIC,UAEnB,OADYD,EAAOG,gBAAgBP,EAAM,aAC9Bc,KAAKC,YAAYC,OAAOH,MAAM,EAAG,KAAO,KACrD,CAAE,MAAOH,GACP,OAAOV,EAAOA,EAAKY,QAAQ,WAAY,IAAIC,MAAM,EAAG,KAAO,MAAQ,EACrE,GAkEF,UA/DiBI,KACf,MAAM,EAACC,EAAM,EAACC,IAAYC,EAAAA,EAAAA,UAAS,KAC7B,EAACC,EAAQ,EAACC,IAAcF,EAAAA,EAAAA,WAAS,IACjC,EAACG,EAAM,EAACC,IAAYJ,EAAAA,EAAAA,UAAS,MAkCnC,OAhCAK,EAAAA,EAAAA,YAAU,KAER,GAAsB,oBAAXxB,OAAwB,OAEVyB,WACvB,IACE,MAAMC,EAAiB,YACjBC,QAAiBC,EAAAA,EAAMC,IAAI,uCAAwC,CACvEC,OAAQ,CACNC,QAAQ,4BAA6BL,KAIrCC,EAASK,MAAQL,EAASK,KAAKC,QACjCf,EAASS,EAASK,KAAKC,MAAMC,KAAIC,IAAI,CACnCC,MAAOD,EAAKC,MACZC,YAAa3B,EAAoByB,EAAKE,aACtCC,KAAMH,EAAKG,KACXC,MAAOzC,EAAqBqC,EAAKE,kBAEnChB,GAAW,GAEf,CAAE,MAAOC,GACPkB,QAAQlB,MAAM,+BAAgCA,GAC9CC,EAAS,wDACTF,GAAW,EACb,GAGFoB,EAAkB,GACjB,IAGDC,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAAA,WAASE,MAAO,CAAEC,QAAS,OAAQC,UAAW,WAC5CJ,EAAAA,cAAA,MAAIE,MAAO,CAAEG,aAAc,OAAQC,SAAU,OAAQC,MAAO,YAAa,iBACxE7B,EACCsB,EAAAA,cAAA,KAAGE,MAAO,CAAEE,UAAW,WAAY,uBACjCxB,EACFoB,EAAAA,cAAA,KAAGE,MAAO,CAAEE,UAAW,SAAUG,MAAO,QAAU3B,GAElDoB,EAAAA,cAAA,OAAKE,MAAO,CAAEM,QAAS,OAAQC,SAAU,OAAQC,IAAK,SAAUC,eAAgB,WAC7EpC,EAAMiB,KAAI,CAACC,EAAMmB,IAChBZ,EAAAA,cAACa,EAAAA,EAAQ,CACPC,IAAKF,EACLlB,MAAOD,EAAKC,MACZC,YAAaF,EAAKE,YAClBC,KAAMH,EAAKG,KACXC,MAAOJ,EAAKI,YAMf,C","sources":["webpack://gatsby-starter-default/./src/pages/blog.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Layout from \"../components/layout\";\nimport axios from 'axios';\nimport DataCard from '../components/DataCard';\n\n// Safe extract functions that work in both browser and SSR contexts\nconst extractImageFromHTML = (html) => {\n  if (!html || typeof window === 'undefined') {\n    // Simple regex-based extraction for SSR\n    const imgRegex = /<img.*?src=\"(.*?)\"/;\n    const match = html && html.match(imgRegex);\n    return match ? match[1] : '';\n  }\n  \n  try {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(html, 'text/html');\n    const imgTag = doc.querySelector('img');\n    return imgTag ? imgTag.src : '';\n  } catch (e) {\n    return '';\n  }\n};\n\nconst extractTextFromHTML = (html) => {\n  if (!html || typeof window === 'undefined') {\n    // Simple regex-based extraction for SSR\n    return html ? html.replace(/<[^>]*>/g, '').slice(0, 150) + '...' : '';\n  }\n  \n  try {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(html, 'text/html');\n    return doc.body.textContent.trim().slice(0, 150) + '...';\n  } catch (e) {\n    return html ? html.replace(/<[^>]*>/g, '').slice(0, 150) + '...' : '';\n  }\n};\n\nconst BlogPage = () => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Prevent execution during SSR\n    if (typeof window === 'undefined') return;\n    \n    const fetchMediumPosts = async () => {\n      try {\n        const mediumUsername = 'r.deb1996'; // Replace with your Medium username\n        const response = await axios.get(`https://api.rss2json.com/v1/api.json`, {\n          params: {\n            rss_url: `https://medium.com/feed/@${mediumUsername}`,\n          },\n        });\n\n        if (response.data && response.data.items) {\n          setPosts(response.data.items.map(post => ({\n            title: post.title,\n            description: extractTextFromHTML(post.description),\n            link: post.link,\n            image: extractImageFromHTML(post.description),\n          })));\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Error fetching Medium posts:', error);\n        setError('Failed to load Medium posts. Please try again later.');\n        setLoading(false);\n      }\n    };\n\n    fetchMediumPosts();\n  }, []);\n\n  return (\n    <Layout>\n      <section style={{ padding: '2rem', textAlign: 'center' }}>\n        <h2 style={{ marginBottom: '2rem', fontSize: '2rem', color: '#34495E' }}>My Blog Posts</h2>\n        {loading ? (\n          <p style={{ textAlign: 'center' }}>ðŸ”„ Loading posts...</p>\n        ) : error ? (\n          <p style={{ textAlign: 'center', color: 'red' }}>{error}</p>\n        ) : ( \n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: '1.5rem', justifyContent: 'center' }}> \n            {posts.map((post, idx) => (\n              <DataCard\n                key={idx}\n                title={post.title}\n                description={post.description}\n                link={post.link}\n                image={post.image}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    </Layout>\n  );\n};\n\nexport default BlogPage;"],"names":["extractImageFromHTML","html","window","imgRegex","match","parser","DOMParser","imgTag","parseFromString","querySelector","src","e","extractTextFromHTML","replace","slice","body","textContent","trim","BlogPage","posts","setPosts","useState","loading","setLoading","error","setError","useEffect","async","mediumUsername","response","axios","get","params","rss_url","data","items","map","post","title","description","link","image","console","fetchMediumPosts","React","Layout","style","padding","textAlign","marginBottom","fontSize","color","display","flexWrap","gap","justifyContent","idx","DataCard","key"],"sourceRoot":""}